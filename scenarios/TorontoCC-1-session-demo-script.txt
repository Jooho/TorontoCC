initial setup

Session 1 - ssh dhcp179-170.gsslab.rdu2.redhat.com 

Session 3 - ssh vm179-144.gsslab.rdu2.redhat.com 

git clone git@github.com:Jooho/smoke.git

Clean steps:
oc exec docker-registry-2-jxm6p  -- rm -rf /registry/* 
oc delete project test java-test


Here is Docker Registry Container 

Here is Ansible Controller

(Session 1) 

oc rsh docker-registry
cd /registry/docker/registry/v2
ls ./
while true; do tree -L 6 /registry ;sleep 2;done 


while true; do tree -L 6 ./repositories/;sleep 2;done 

(Session 5)
oc adm new-project demo1 --display-name="Toronto Convergency Event Test Project 1" --node-selector=kubernetes.io/hostname=vm6.gsslab.rdu2.redhat.com

oc project demo1

oc new-app https://github.com/Jooho/smoke.git

oc expose svc smoke

curl smoke-demo1.cloudapps-37-0911.gsslab.rdu2.redhat.com 

oc get is,istag

==> Change tag from latest to v2
oc edit bc smoke  

oc start-build smoke

oc start-build smoke



(Session 1)
cd /registry

## Links
 tree -L 6 ./repositories/

## Blobs
tree -L 5 ./blobs/    

##Show the relationship between ImageStream and blob
oc describe is smoke

## Choose latest tag
in registry
cat ./repositories/test/smoke/_manifests/revisions/sha256/${Latest_id}  eg) 130ba…..
cat ./blobs/sha256/13/130ba….../data    ⇒ has layers information
cat ./blobs/sha256/77/7734                    ⇒ image information (oc get is)


#JSTART
#JEND

--------------------------------------------------------------------------------------------
# Dry run - prune
oc adm prune images --keep-tag-revisions=1 --keep-younger-than=1m


(Session 5)
# Deploy java application to show the increasing of size in Docker registry


# Dry run - prune
oc adm prune images --keep-tag-revisions=1 --keep-younger-than=1m

## Explain why those are listed


## Deleted images
oc adm prune images --keep-tag-revisions=1 --keep-younger-than=1m --confirm


(Session 1)
## Check registry storage
du -sch /registry
---------------------------------------------



(Session 3)
# Execute a command to see health of the smoke application

while true; do curl smoke-demo1.cloudapps-37-0911.gsslab.rdu2.redhat.com; echo \n;date; sleep 1; done


(Session - 1)
ssh vm6.gsslab.rdu2.redhat.com
top

(Session -2)
ssh vm6.gsslab.rdu2.redhat.com
tail -f /var/log/messages|grep kernel


(Session 5)

oc adm new-project java-test --display-name="Toronto Convergency Event Test Project 2" --node-selector=kubernetes.io/hostname=vm6.gsslab.rdu2.redhat.com
oc project java-test
oc new-app --template=openjdk18-web-basic-s2i -p SOURCE_REPOSITORY_URL=https://github.com/Jooho/spring-boot-demo -p CONTEXT_DIR=""

## Add incremental build 
oc edit buildconfig openjdk-app

incremental: true

## Change tag 


oc start-build openjdk-app



# Add environment value (JAVA_OPTIONS=-Xms5G -Xmx6G) 
 oc env dc openjdk-app -e "JAVA_OPTIONS=-Xms6000m -Xmx6700m"  


# Test purpose, disable ExitOnOutOfMemoryError option
- oc env dc openjdk-app -e "JAVA_OPTS_APPEND=-XX:-ExitOnOutOfMemoryError"




 oc env dc openjdk-app -e "JAVA_OPTIONS=-Xms6000m -Xmx6700m"  -e "JAVA_OPTS_APPEND=-XX:-ExitOnOutOfMemoryError"

(session 4)
oc logs $(oc get pod|grep -v deploy| grep Running|awk '{print $1'}) -f




(Session 3)

curl openjdk-app-java-test.cloudapps-37-0911.gsslab.rdu2.redhat.com/cpu-load
curl openjdk-app-java-test.cloudapps-37-0911.gsslab.rdu2.redhat.com/leak


(Session 6)
ssh vm6.gsslab.rdu2.redhat.com 

(Node session)
##Leak 을 2번 연속 치면 used 메모리가 7400까지 올라간다. 그때 login을 실시 하면 hang...

  kube-reserved:
    - "cpu=200m,memory=512Mi"
  system-reserved:
    - "cpu=200m,memory=512Mi"

oc env dc openjdk-app -e "JAVA_OPTIONS=-Xms6000m -Xmx6400m"   <== node memory pressure
oc env dc openjdk-app -e "JAVA_OPTIONS=-Xms6000m -Xmx6300m" <== 죽지 않아
--------------------------------------------------------
(session 5)
oc delete event --all

oc env dc openjdk-app -e "JAVA_OPTIONS=-Xms1G -Xmx2G"

echo 'apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
spec:
  hard:
    pods: "2" 
    requests.cpu: "1" 
    requests.memory: 2Gi 
    limits.cpu: "2" 
    limits.memory: "4Gi" '|oc create -f -

echo  'apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "core-resource-limits" 
spec:
  limits:
    - type: "Pod"
      max:
        cpu: "2" 
        memory: "2Gi" 
      min:
        cpu: "200m" 
        memory: "6Mi" 
    - type: "Container"
      max:
        cpu: "1" 
        memory: "2Gi" 
      min:
        cpu: "100m" 
        memory: "4Mi" 
      default:
        cpu: "1" 
        memory: "2Gi" 
      defaultRequest:
        cpu: "500m" 
        memory: "1Gi" '|oc create -f -

oc delete pod --all
oc scale --replicas=2 dc openjdk-app

oc describe resourcequota compute-resources

oc rollout latest dc/openjdk-app

==> It is working because deployment strategy is Recreate


Change the deployment strategy 

oc edit dc openjdk-app
    type: Rolling
    rollingParams:
      updatePeriodSeconds: 1 
      intervalSeconds: 1 
      timeoutSeconds: 120 
      maxSurge: "0%" 
      maxUnavailable: "10%" 


oc delete pod,event --all

oc rollout latest dc/openjdk-app
oc get event
==> blocked because of Quota


# Add quota scope
oc delete resourcequota compute-resources      

echo 'apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
spec:
  hard:
    pods: "2" 
    requests.cpu: "1" 
    requests.memory: 2Gi 
    limits.cpu: "2" 
    limits.memory: "4Gi" 
  scopes:
  - NotTerminating'|oc create -f -







